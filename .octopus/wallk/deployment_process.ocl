step "hashicorp-vault-approle-get-wrapped-secret-id" {
    name = "HashiCorp Vault - AppRole Get Wrapped Secret ID"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-23"
            Octopus.Action.Template.Version = "5"
            Vault.AppRole.WrappedSecretID.ApiVersion = "v1"
            Vault.AppRole.WrappedSecretID.AppRolePath = "/auth/approle"
            Vault.AppRole.WrappedSecretID.AuthToken = "#{hashicorp.vault.approle.token}"
            Vault.AppRole.WrappedSecretID.Namespace = "#{hashicorp.vault.namespace}"
            Vault.AppRole.WrappedSecretID.RoleName = "octopus-application-role"
            Vault.AppRole.WrappedSecretID.TTL = "120s"
            Vault.AppRole.WrappedSecretID.VaultAddress = "#{hashicorp.vault.url}"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "deploy-kubernetes-secret" {
    name = "Deploy Kubernetes Secret"
    properties = {
        Octopus.Action.TargetRoles = "demo-frontend"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "demo-frontend/demo-frontend-secret.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "demo-frontend/demo-frontend-secret.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{project.namesapce}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""
    }
}

step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes Application"
    properties = {
        Octopus.Action.TargetRoles = "demo-frontend"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        is_disabled = true
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "demo-frontend/demo-frontend.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "demo-frontend/demo-frontend.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Octopus.Project.Name | ToLower }-#{Octopus.Environment.Name | ToLower}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        packages "octopus-secure-cd-scale_demo-frontend" {
            acquisition_location = "NotAcquired"
            feed = "github-container-registry"
            package_id = "adamoctoclose/octopus-secure-cd-scale/demo-frontend"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "print-application-url" {
    name = "Print Application URL"
    properties = {
        Octopus.Action.TargetRoles = "demo-frontend"
    }

    action {
        action_type = "Octopus.Script"
        is_disabled = true
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptFileName = "scripts/get-application-urls.ps1"
            Octopus.Action.Script.ScriptParameters = "-Namespace #{project.namesapce}"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
    }
}

step "hashicorp-vault-approle-unwrap-secret-id" {
    name = "HashiCorp Vault - AppRole Unwrap Secret ID"

    action {
        is_disabled = true
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-41"
            Octopus.Action.Template.Version = "4"
            Vault.AppRole.UnwrapSecretID.ApiVersion = "v1"
            Vault.AppRole.UnwrapSecretID.Namespace = "#{hashicorp.vault.namespace}"
            Vault.AppRole.UnwrapSecretID.VaultAddress = "#{hashicorp.vault.url}"
            Vault.AppRole.UnwrapSecretID.WrappedToken = "#{Octopus.Action[HashiCorp Vault - AppRole Get Wrapped Secret ID].Output.WrappedToken}"
            Vault.AppRole.UnwrapSecretID.WrappedTokenCreationPath = "#{Octopus.Action[HashiCorp Vault - AppRole Get Wrapped Secret ID].Output.WrappedTokenCreationPath}"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "hashicorp-vault-approle-unwrap-secret-id-and-login" {
    name = "HashiCorp Vault - AppRole Unwrap Secret ID and Login"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-24"
            Octopus.Action.Template.Version = "5"
            Vault.AppRole.UnwrapSecretID.Login.ApiVersion = "v1"
            Vault.AppRole.UnwrapSecretID.Login.AppRolePath = "/auth/approle"
            Vault.AppRole.UnwrapSecretID.Login.Namespace = "#{hashicorp.vault.namespace}"
            Vault.AppRole.UnwrapSecretID.Login.RoleID = "#{project.hashicorp.roleid}"
            Vault.AppRole.UnwrapSecretID.Login.VaultAddress = "#{hashicorp.vault.url}"
            Vault.AppRole.UnwrapSecretID.Login.WrappedToken = "#{project.hashicorp.WrappedToken}"
            Vault.AppRole.UnwrapSecretID.Login.WrappedTokenCreationPath = "#{project.hashicorp.WrappedTokenCreationPath}"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "run-a-script" {
    name = "Run a Script"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $token = $OctopusParameters["project.hashicorp.AppRoleAuthToken"]
                
                write-highlight $token
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "Bash"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "hashicorp-vault-key-value-v2-retrieve-secrets" {
    name = "HashiCorp Vault - Key Value (v2) retrieve secrets"

    action {
        properties = {
            Octopus.Action.Template.Id = "ActionTemplates-43"
            Octopus.Action.Template.Version = "9"
            Vault.Retrieve.KV.V2.Secrets.ApiVersion = "v1"
            Vault.Retrieve.KV.V2.Secrets.AuthToken = "#{project.hashicorp.AppRoleAuthToken}"
            Vault.Retrieve.KV.V2.Secrets.Namespace = "#{hashicorp.vault.namespace}"
            Vault.Retrieve.KV.V2.Secrets.PrintVariableNames = "True"
            Vault.Retrieve.KV.V2.Secrets.RecursiveSearch = "False"
            Vault.Retrieve.KV.V2.Secrets.RetrievalMethod = "List"
            Vault.Retrieve.KV.V2.Secrets.SecretsPath = "secret/data/webapp/config"
            Vault.Retrieve.KV.V2.Secrets.VaultAddress = "#{hashicorp.vault.url}"
        }
        worker_pool = "hosted-ubuntu"
    }
}