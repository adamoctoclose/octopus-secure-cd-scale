step "deploy-kubernetes-yaml" {
    name = "Deploy Kubernetes YAML"
    properties = {
        Octopus.Action.TargetRoles = "demo-frontend"
    }

    action {
        action_type = "Octopus.KubernetesDeployRawYaml"
        properties = {
            Octopus.Action.GitRepository.FilePathFilters = "demo-frontend/demo-frontend.yaml"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.CustomResourceYamlFileName = "demo-frontend/demo-frontend.yaml"
            Octopus.Action.KubernetesContainers.Namespace = "#{Octopus.Project.Name | ToLower }-#{Octopus.Environment.Name | ToLower}"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "**/*.{yml,yaml}"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptSource = "GitRepository"
        }
        worker_pool_variable = ""

        packages "octopus-secure-cd-scale_demo-frontend" {
            acquisition_location = "NotAcquired"
            feed = "github-container-registry"
            package_id = "adamoctoclose/octopus-secure-cd-scale/demo-frontend"
            properties = {
                Extract = "False"
                Purpose = "DockerImageReference"
                SelectionMode = "immediate"
            }
        }
    }
}

step "configure-and-apply-a-kubernetes-secret" {
    name = "Configure and apply a Kubernetes Secret"
    properties = {
        Octopus.Action.TargetRoles = "demo-frontend"
    }

    action {
        action_type = "Octopus.KubernetesDeploySecret"
        properties = {
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Kubernetes.ServerSideApply.Enabled = "True"
            Octopus.Action.Kubernetes.ServerSideApply.ForceConflicts = "True"
            Octopus.Action.KubernetesContainers.SecretName = "my-secret"
            Octopus.Action.KubernetesContainers.SecretValues = "{\"MY_SECRET\":\"#{project.secret}\"}"
        }
        worker_pool_variable = ""
    }
}